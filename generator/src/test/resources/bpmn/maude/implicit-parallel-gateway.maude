load model-checker.maude .

--- Multiset implementation could be extracted as well.
fmod MSET is pr
    STRING .
    sorts NeMSet MSet .
    subsort String < NeMSet < MSet .

    op none : -> MSet [ctor] .
    op __ : MSet MSet -> MSet [ctor assoc comm id: none] .
    op __ : NeMSet MSet -> NeMSet [ctor ditto] .
    op __ : MSet NeMSet -> NeMSet [ctor ditto] .
endfm

mod BPMN-EXECUTION is
    pr MSET .
    pr STRING .
    pr CONFIGURATION .

    sort ProcessState .
    subsort String < Oid .

    ops Running, Terminated : -> ProcessState [ctor] .
    op tokens :_ : MSet -> Attribute [ctor] .
    op messages :_ : MSet -> Attribute [ctor] .
    op subprocesses :_ : Configuration -> Attribute [ctor] .
    op state :_ : ProcessState -> Attribute [ctor] .
    op ProcessSnapshot : -> Cid [ctor] .

    op terminate : Configuration -> Configuration .

    var P : String .
    vars T : MSet . --- tokens
    vars M : MSet . --- messages
    vars S : Configuration . --- subprocesses
    vars STATE : ProcessState . --- state
    var PS : Configuration .

    --- NOOP if none
    eq terminate(none) = none .
    --- NOOP if already terminated
    eq terminate(< P : ProcessSnapshot | tokens : T, messages : M, subprocesses : S, state : Terminated >) = < P : ProcessSnapshot | tokens : T, messages : M, subprocesses : S, state : Terminated > .
    --- Terminate all subprocesses recursively
    eq terminate(< P : ProcessSnapshot | tokens : T, messages : M, subprocesses : S, state : STATE > PS) = < P : ProcessSnapshot | tokens : T, messages : none, subprocesses : terminate(S), state : Terminated > terminate(PS) .

    rl [naturalTerminate] :
    < P : ProcessSnapshot | tokens : none, messages : M, subprocesses : none, state : Running >
                            =>
    < P : ProcessSnapshot | tokens : none, messages : none, subprocesses : none, state : Terminated > .
endm

mod BPMN-EXECUTION-implicit-parallel-gateway is
    pr BPMN-EXECUTION .

    --- Generated variables
    vars T : MSet . --- tokens
    vars M : MSet . --- messages
    vars S : Configuration . --- subprocesses

    --- Generated rules
    rl [start_StartEvent_1] :  < "implicit-parallel-gateway" : ProcessSnapshot | tokens : ("start (StartEvent_1)" T), messages : (M), subprocesses : (S), state : Running > => < "implicit-parallel-gateway" : ProcessSnapshot | tokens : ("start_A (Flow_0ieyd6c)" T), messages : (M), subprocesses : (S), state : Running > .
    rl [A_Activity_1l6v9dq_start] :  < "implicit-parallel-gateway" : ProcessSnapshot | tokens : ("start_A (Flow_0ieyd6c)" T), messages : (M), subprocesses : (S), state : Running > => < "implicit-parallel-gateway" : ProcessSnapshot | tokens : ("A (Activity_1l6v9dq)" T), messages : (M), subprocesses : (S), state : Running > .
    rl [A_Activity_1l6v9dq_end] :  < "implicit-parallel-gateway" : ProcessSnapshot | tokens : ("A (Activity_1l6v9dq)" T), messages : (M), subprocesses : (S), state : Running > => < "implicit-parallel-gateway" : ProcessSnapshot | tokens : ("A_B (Flow_0ck3822)" "A_C (Flow_0e4dh5d)" T), messages : (M), subprocesses : (S), state : Running > .
    rl [B_Activity_0b4qs7m_start] :  < "implicit-parallel-gateway" : ProcessSnapshot | tokens : ("A_B (Flow_0ck3822)" T), messages : (M), subprocesses : (S), state : Running > => < "implicit-parallel-gateway" : ProcessSnapshot | tokens : ("B (Activity_0b4qs7m)" T), messages : (M), subprocesses : (S), state : Running > .
    rl [B_Activity_0b4qs7m_end] :  < "implicit-parallel-gateway" : ProcessSnapshot | tokens : ("B (Activity_0b4qs7m)" T), messages : (M), subprocesses : (S), state : Running > => < "implicit-parallel-gateway" : ProcessSnapshot | tokens : ("B_p1 (Flow_0brzjix)" T), messages : (M), subprocesses : (S), state : Running > .
    rl [C_Activity_0q12g5f_start] :  < "implicit-parallel-gateway" : ProcessSnapshot | tokens : ("A_C (Flow_0e4dh5d)" T), messages : (M), subprocesses : (S), state : Running > => < "implicit-parallel-gateway" : ProcessSnapshot | tokens : ("C (Activity_0q12g5f)" T), messages : (M), subprocesses : (S), state : Running > .
    rl [C_Activity_0q12g5f_end] :  < "implicit-parallel-gateway" : ProcessSnapshot | tokens : ("C (Activity_0q12g5f)" T), messages : (M), subprocesses : (S), state : Running > => < "implicit-parallel-gateway" : ProcessSnapshot | tokens : ("C_p1 (Flow_1izb8k4)" T), messages : (M), subprocesses : (S), state : Running > .
    rl [p1_Gateway_0ol452b] :  < "implicit-parallel-gateway" : ProcessSnapshot | tokens : ("B_p1 (Flow_0brzjix)" "C_p1 (Flow_1izb8k4)" T), messages : (M), subprocesses : (S), state : Running > => < "implicit-parallel-gateway" : ProcessSnapshot | tokens : ("p1_end (Flow_13w8ztu)" T), messages : (M), subprocesses : (S), state : Running > .
    rl [end_Event_1otjtiv] :  < "implicit-parallel-gateway" : ProcessSnapshot | tokens : ("p1_end (Flow_13w8ztu)" T), messages : (M), subprocesses : (S), state : Running > => < "implicit-parallel-gateway" : ProcessSnapshot | tokens : (T), messages : (M), subprocesses : (S), state : Running > .

    --- Start configuration which would be generated
    op init : -> Configuration .
    eq init = < "implicit-parallel-gateway" : ProcessSnapshot | tokens : ("start (StartEvent_1)"), messages : (none), subprocesses : (none), state : Running > .
endm

mod BPMN-PREDS is
    pr BPMN-EXECUTION-implicit-parallel-gateway .
    pr SATISFACTION .
    subsort Configuration < State .

    var C : Configuration .
    var P : Prop .
    var X : Oid .
    var T : MSet .
    var M : MSet .
    var T1 : NeMSet .
    var S : Configuration .
    var State : ProcessState .


    op allTerminated : -> Prop .
    eq < X : ProcessSnapshot | tokens : T, messages : M, subprocesses : S, state : Running > C |= allTerminated = false .
    eq C |= allTerminated = true [owise] .

    op unsafe : -> Prop .
    eq < X : ProcessSnapshot | tokens : (T1 T1 T), messages : M, subprocesses : S, state : State > C |= unsafe = true .
    eq C |= unsafe = false [owise] .

    --- Generated atomic propositions
    --- no propositions
endm

mod BPMN-CHECK is
    pr BPMN-PREDS .
    pr MODEL-CHECKER .
    pr LTL-SIMPLIFIER .
endm

red modelCheck(init,  <> [] allTerminated) .
