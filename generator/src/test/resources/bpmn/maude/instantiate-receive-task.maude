load model-checker.maude .

--- Multiset implementation could be extracted as well.
fmod MSET is pr
    STRING .
    sorts NeMSet MSet .
    subsort String < NeMSet < MSet .

    op none : -> MSet [ctor] .
    op __ : MSet MSet -> MSet [ctor assoc comm id: none] .
    op __ : NeMSet MSet -> NeMSet [ctor ditto] .
    op __ : MSet NeMSet -> NeMSet [ctor ditto] .
endfm

mod BPMN-EXECUTION is
    pr MSET .
    pr STRING .
    pr CONFIGURATION .

    sort ProcessState .
    subsort String < Oid .

    --- BPMNSystem
    op BPMNSystem : -> Cid [ctor] .
    op messages :_ : MSet -> Attribute [ctor] .
    op processes :_ : Configuration -> Attribute [ctor] .

    --- Processes
    op ProcessSnapshot : -> Cid [ctor] .
    op tokens :_ : MSet -> Attribute [ctor] .
    op subprocesses :_ : Configuration -> Attribute [ctor] .
    ops Running, Terminated : -> ProcessState [ctor] .
    op state :_ : ProcessState -> Attribute [ctor] .

    op terminate : Configuration -> Configuration .
    --- Replace all occurrences of the first object with the second object in the given configuration.
    op forAll : Configuration Object Object -> Configuration .

    vars P P1 : String .
    vars T : MSet . --- tokens
    vars S : Configuration . --- subprocesses
    vars STATE : ProcessState . --- state
    var PS : Configuration .

    vars o1 o2 o3 : Object .
    eq forAll(none, o2, o3) = none .
    --- Replace the occurrence of o2 by o3
    eq forAll(o2 PS, o2, o3) = forAll(o3 PS, o2, o3) .
    --- Ignore o1 since it is not the same as o2.
    ceq forAll(o1 PS, o2, o3) = o1 forAll(PS, o2, o3) if o1 =/= o2 .

    eq terminate(none) = none .
    --- NOOP if already terminated
    eq terminate(< P : ProcessSnapshot | tokens : T, subprocesses : S, state : Terminated >) = < P : ProcessSnapshot | tokens : T, subprocesses : S, state : Terminated > .
    --- Terminate all subprocesses recursively
    eq terminate(< P : ProcessSnapshot | tokens : T, subprocesses : S, state : STATE > PS) = < P : ProcessSnapshot | tokens : T, subprocesses : terminate(S), state : Terminated > terminate(PS) .

    rl [naturalTerminate] :
    < P : ProcessSnapshot | tokens : none, subprocesses : none, state : Running >
                            =>
    < P : ProcessSnapshot | tokens : none, subprocesses : none, state : Terminated > .
endm

mod BPMN-EXECUTION-instantiate-receive-task is
    pr BPMN-EXECUTION .

    --- Generated variables
    vars T : MSet . --- tokens
    vars M : MSet . --- messages
    vars S : Configuration . --- subprocesses
    vars P : Configuration . --- processes

    --- Generated rules
    rl [A_Activity_1vcu0jp_end] :  < "instantiate-receive-task" : BPMNSystem | messages : ("end_2_A" M), processes : (< "process1" : ProcessSnapshot | tokens : ("A (Activity_1vcu0jp)" T), subprocesses : (S), state : Running > P) > => < "instantiate-receive-task" : BPMNSystem | messages : (M), processes : (< "process1" : ProcessSnapshot | tokens : ("A_B (Flow_10ze7r7)" T), subprocesses : (S), state : Running > P) > .
    rl [B_Activity_1ymioaq_start] :  < "process1" : ProcessSnapshot | tokens : ("A_B (Flow_10ze7r7)" T), subprocesses : (S), state : Running > => < "process1" : ProcessSnapshot | tokens : ("B (Activity_1ymioaq)" T), subprocesses : (S), state : Running > .
    rl [B_Activity_1ymioaq_end] :  < "process1" : ProcessSnapshot | tokens : ("B (Activity_1ymioaq)" T), subprocesses : (S), state : Running > => < "process1" : ProcessSnapshot | tokens : ("B_end_1 (Flow_0jcij1i)" T), subprocesses : (S), state : Running > .
    rl [end_1_Event_1qkko2l] :  < "process1" : ProcessSnapshot | tokens : ("B_end_1 (Flow_0jcij1i)" T), subprocesses : (S), state : Running > => < "process1" : ProcessSnapshot | tokens : (T), subprocesses : (S), state : Running > .
    rl [start_2_Event_0awcs7b] :  < "process2" : ProcessSnapshot | tokens : ("start_2 (Event_0awcs7b)" T), subprocesses : (S), state : Running > => < "process2" : ProcessSnapshot | tokens : ("start_2_end_2 (Flow_15q2a0w)" T), subprocesses : (S), state : Running > .
    rl [end_2_Event_06176jk] :  < "instantiate-receive-task" : BPMNSystem | messages : (M), processes : (< "process2" : ProcessSnapshot | tokens : ("start_2_end_2 (Flow_15q2a0w)" T), subprocesses : (S), state : Running > P) > => < "instantiate-receive-task" : BPMNSystem | messages : ("end_2_A" M), processes : (< "process2" : ProcessSnapshot | tokens : (T), subprocesses : (S), state : Running > < "process1" : ProcessSnapshot | tokens : ("A (Activity_1vcu0jp)" T), subprocesses : (none), state : Running > P) > .

    --- Start configuration which would be generated
    op init : -> Configuration .
    eq init = < "instantiate-receive-task" : BPMNSystem | messages : (none), processes : (< "process2" : ProcessSnapshot | tokens : ("start_2 (Event_0awcs7b)"), subprocesses : (none), state : Running >) > .
endm

mod BPMN-PREDS is
    pr BPMN-EXECUTION-instantiate-receive-task .
    pr SATISFACTION .
    subsort Configuration < State .

    var C : Configuration .
    var P : Prop .
    var X Y : Oid .
    var T : MSet .
    var M : MSet . --- messages
    var T1 : NeMSet .
    var S : Configuration .
    var State : ProcessState .


    op allTerminated : -> Prop .
    eq < X : BPMNSystem | messages : M, processes : (< Y : ProcessSnapshot | tokens : T, subprocesses : S, state : Running > C) > |= allTerminated = false .
    eq < X : BPMNSystem | messages : M, processes : (C) > |= allTerminated = true [owise] .

    op unsafe : -> Prop .
    eq < X : BPMNSystem | messages : M, processes : (< Y : ProcessSnapshot | tokens : (T1 T1 T), subprocesses : S, state : State > C) > |= unsafe = true .
    eq < X : BPMNSystem | messages : M, processes : (C) > |= unsafe = false [owise] .

    --- Generated atomic propositions
    --- no propositions
endm

mod BPMN-CHECK is
    pr BPMN-PREDS .
    pr MODEL-CHECKER .
    pr LTL-SIMPLIFIER .
endm

red modelCheck(init,  <> [] allTerminated) .
