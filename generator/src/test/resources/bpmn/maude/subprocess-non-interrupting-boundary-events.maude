load model-checker.maude .

--- Multiset implementation could be extracted as well.
fmod MSET is
    pr STRING .
    pr NAT .
    sorts NeMSet MSet .
    subsort String < NeMSet < MSet .

    op none : -> MSet [ctor] .
    op __ : MSet MSet -> MSet [ctor assoc comm id: none] .
    op __ : NeMSet MSet -> NeMSet [ctor ditto] .
    op __ : MSet NeMSet -> NeMSet [ctor ditto] .

    op contains : MSet String -> Bool .

    var X : String .
    var Y : String .
    var S S1 : MSet .

    eq contains(none, X) = false .
    eq contains(X S, X) = true .
    ceq contains(Y S, X) = contains(S, X) if X =/= Y .

    op size : MSet -> Nat .
    eq size(none) = 0 .
    eq size(X S) = size(S) + 1 .

    op lessOrEqualSize : MSet MSet -> Bool .
    ceq lessOrEqualSize(S, S1) = true if size(S) <= size(S1) .
    eq lessOrEqualSize(S, S1) = false [owise] .
endfm

mod BPMN-EXECUTION is
    pr MSET .
    pr STRING .
    pr CONFIGURATION .

    sort ProcessState .
    subsort String < Oid .

    --- BPMNSystem
    op BPMNSystem : -> Cid [ctor] .
    op messages :_ : MSet -> Attribute [ctor] .
    op processes :_ : Configuration -> Attribute [ctor] .

    --- Processes
    op ProcessSnapshot : -> Cid [ctor] .
    op name :_ : String -> Attribute [ctor] .
    op tokens :_ : MSet -> Attribute [ctor] .
    op signals :_ : MSet -> Attribute [ctor] .
    op subprocesses :_ : Configuration -> Attribute [ctor] .
    ops Running, Terminated : -> ProcessState [ctor] .
    op state :_ : ProcessState -> Attribute [ctor] .

    --- Auxiliary
    op signalAll : Configuration MSet -> Configuration .
    op signal : MSet MSet -> MSet .
    op terminate : Configuration -> Configuration .

    var X : Oid .
    vars P P1 : String .
    vars T T1 : MSet . --- tokens
    vars SIG : MSet . --- signals
    vars S : Configuration . --- subprocesses
    vars STATE : ProcessState . --- state
    var PS : Configuration .

    eq signalAll(none, T) = none .
    ceq signalAll(< X : ProcessSnapshot | name : P, tokens : T, signals : SIG, subprocesses : S, state : STATE > PS, T1) = < X : ProcessSnapshot | name : P, tokens : T, signals : (SIG signal(T, T1)), subprocesses : signalAll(S, T1), state : STATE > signalAll(PS, T1) if lessOrEqualSize(SIG, T1). --- maximum signal bound is the number of tokens.
    eq signalAll(< X : ProcessSnapshot | name : P, tokens : T, signals : SIG, subprocesses : S, state : STATE > PS, T1) = < X : ProcessSnapshot | name : P, tokens : T, signals : (SIG), subprocesses : signalAll(S, T1), state : STATE > signalAll(PS, T1) [owise] .

    ceq signal(P T, T1) = (P + "_signal") signal(T, T1) if contains(T1, P) .
    eq signal(P T, T1) = signal(T, T1) [owise] .
    eq signal(none, T1) = none .

    eq terminate(none) = none .
    --- NOOP if already terminated
    eq terminate(< X : ProcessSnapshot | name : P, tokens : T, signals : SIG, subprocesses : S, state : Terminated >) = < X : ProcessSnapshot | name : P, tokens : T, signals : SIG, subprocesses : S, state : Terminated > .
    --- Terminate all subprocesses recursively
    eq terminate(< X : ProcessSnapshot | name : P, tokens : T, signals : SIG, subprocesses : S, state : STATE > PS) = < X : ProcessSnapshot | name : P, tokens : T, signals : SIG, subprocesses : terminate(S), state : Terminated > terminate(PS) .

    rl [naturalTerminate] :
    < X : ProcessSnapshot | name : P, tokens : none, signals : SIG, subprocesses : none, state : Running >
                            =>
    < X : ProcessSnapshot | name : P, tokens : none, signals : none, subprocesses : none, state : Terminated > .
endm

mod BPMN-EXECUTION-subprocess-non-interrupting-boundary-events is
    pr BPMN-EXECUTION .

    --- Generated variables
    vars o0 OT o1 : Oid . --- Oids
    vars T T1 : MSet . --- tokens
    vars SIG SIG1 : MSet . --- signals
    vars M : MSet . --- messages
    vars S1 S S2 : Configuration . --- subprocesses
    vars P : Configuration . --- processes
    vars PS : Configuration . --- other processes

    --- Generated rules
    rl [end1_Event_1qc5h0s] :  < o0 : ProcessSnapshot | name : "p1", tokens : ("Subprocess_end1 (Flow_0q4s0e5)" T), signals : (SIG), subprocesses : (S), state : Running > => < o0 : ProcessSnapshot | name : "p1", tokens : (T), signals : (none), subprocesses : (S), state : Running > .
    rl [timer_end_Event_0t1g0d3] :  < o0 : ProcessSnapshot | name : "p1", tokens : ("timer_timer_end (Flow_1rj4f8m)" T), signals : (SIG), subprocesses : (S), state : Running > => < o0 : ProcessSnapshot | name : "p1", tokens : (T), signals : (none), subprocesses : (S), state : Running > .
    rl [signal_end_Event_07bjwow] :  < o0 : ProcessSnapshot | name : "p1", tokens : ("signal_signal_end (Flow_0y8xnla)" T), signals : (SIG), subprocesses : (S), state : Running > => < o0 : ProcessSnapshot | name : "p1", tokens : (T), signals : (none), subprocesses : (S), state : Running > .
    rl [message_end_Event_0dig3bl] :  < o0 : ProcessSnapshot | name : "p1", tokens : ("message_message_end (Flow_0z1ut3g)" T), signals : (SIG), subprocesses : (S), state : Running > => < o0 : ProcessSnapshot | name : "p1", tokens : (T), signals : (none), subprocesses : (S), state : Running > .
    rl [Subprocess_Activity_0zu4scn_start] :  < o0 : ProcessSnapshot | name : "p1", tokens : ("start_Subprocess (Flow_0rt92qb)" T), signals : (SIG), subprocesses : (S), state : Running > => < o0 : ProcessSnapshot | name : "p1", tokens : (T), signals : (none), subprocesses : (< "Subprocess" : ProcessSnapshot | name : "Subprocess", tokens : ("start_sub_Subactivity (Flow_1uendr0)"), signals : (none), subprocesses : (none), state : Running > S), state : Running > .
    rl [Subprocess_Activity_0zu4scn_end] :  < o0 : ProcessSnapshot | name : "p1", tokens : (T), signals : (SIG), subprocesses : (< OT : ProcessSnapshot | name : "Subprocess", tokens : (none), signals : (none), subprocesses : (none), state : Terminated > S), state : Running > => < o0 : ProcessSnapshot | name : "p1", tokens : ("Subprocess_end1 (Flow_0q4s0e5)" T), signals : (none), subprocesses : (S), state : Running > .
    rl [Subactivity_Activity_0l8md1o_start] :  < o0 : ProcessSnapshot | name : "Subprocess", tokens : ("start_sub_Subactivity (Flow_1uendr0)" T), signals : (SIG), subprocesses : (S), state : Running > => < o0 : ProcessSnapshot | name : "Subprocess", tokens : ("Subactivity (Activity_0l8md1o)" T), signals : (none), subprocesses : (S), state : Running > .
    rl [Subactivity_Activity_0l8md1o_end] :  < o0 : ProcessSnapshot | name : "Subprocess", tokens : ("Subactivity (Activity_0l8md1o)" T), signals : (SIG), subprocesses : (S), state : Running > => < o0 : ProcessSnapshot | name : "Subprocess", tokens : ("Subactivity_end_sub (Flow_14tryz7)" T), signals : (none), subprocesses : (S), state : Running > .
    rl [end_sub_Event_1jup1bz] :  < o0 : ProcessSnapshot | name : "Subprocess", tokens : ("Subactivity_end_sub (Flow_14tryz7)" T), signals : (SIG), subprocesses : (S), state : Running > => < o0 : ProcessSnapshot | name : "Subprocess", tokens : (T), signals : (none), subprocesses : (S), state : Running > .
    rl [timer_Event_0jlum9m] :  < o0 : ProcessSnapshot | name : "p1", tokens : (T), signals : (SIG), subprocesses : (< o1 : ProcessSnapshot | name : "Subprocess", tokens : (T1), signals : (SIG1), subprocesses : (S1), state : Running > S2), state : Running > => < o0 : ProcessSnapshot | name : "p1", tokens : ("timer_timer_end (Flow_1rj4f8m)" T), signals : (none), subprocesses : (< o1 : ProcessSnapshot | name : "Subprocess", tokens : (T1), signals : (SIG1), subprocesses : (S1), state : Running > S2), state : Running > .
    rl [message_Event_0izwujm] :  < "subprocess-non-interrupting-boundary-events" : BPMNSystem | messages : ("interruptMessage_message (Flow_0x1ey4c)" M), processes : (< o0 : ProcessSnapshot | name : "p1", tokens : (T), signals : (SIG), subprocesses : (< o1 : ProcessSnapshot | name : "Subprocess", tokens : (T1), signals : (SIG1), subprocesses : (S1), state : Running > S2), state : Running > P) > => < "subprocess-non-interrupting-boundary-events" : BPMNSystem | messages : (M), processes : (< o0 : ProcessSnapshot | name : "p1", tokens : ("message_message_end (Flow_0z1ut3g)" T), signals : (none), subprocesses : (< o1 : ProcessSnapshot | name : "Subprocess", tokens : (T1), signals : (SIG1), subprocesses : (S1), state : Running > S2), state : Running > P) > .
    rl [signalOrMessage_Gateway_0wsn3ff] :  < o0 : ProcessSnapshot | name : "interruptTrigger", tokens : ("start_trigger_signalOrMessage (Flow_0eyi3rv)" T), signals : (SIG), subprocesses : (S), state : Running > => < o0 : ProcessSnapshot | name : "interruptTrigger", tokens : ("signalOrMessage_interruptMessage (Flow_171ay5a)" T), signals : (none), subprocesses : (S), state : Running > .
    rl [signalOrMessage_Gateway_0wsn3ff] :  < o0 : ProcessSnapshot | name : "interruptTrigger", tokens : ("start_trigger_signalOrMessage (Flow_0eyi3rv)" T), signals : (SIG), subprocesses : (S), state : Running > => < o0 : ProcessSnapshot | name : "interruptTrigger", tokens : ("signalOrMessage_interruptSignal (Flow_1wwo81f)" T), signals : (none), subprocesses : (S), state : Running > .
    rl [interruptMessage_Event_0ajr2wq] :  < "subprocess-non-interrupting-boundary-events" : BPMNSystem | messages : (M), processes : (< o0 : ProcessSnapshot | name : "interruptTrigger", tokens : ("signalOrMessage_interruptMessage (Flow_171ay5a)" T), signals : (SIG), subprocesses : (S), state : Running > P) > => < "subprocess-non-interrupting-boundary-events" : BPMNSystem | messages : ("interruptMessage_message (Flow_0x1ey4c)" M), processes : (< o0 : ProcessSnapshot | name : "interruptTrigger", tokens : (T), signals : (SIG), subprocesses : (S), state : Running > P) > .
    rl [interruptSignal_Event_1p4o1ul] :  < "subprocess-non-interrupting-boundary-events" : BPMNSystem | messages : (M), processes : (< o0 : ProcessSnapshot | name : "interruptTrigger", tokens : ("signalOrMessage_interruptSignal (Flow_1wwo81f)" T), signals : (SIG), subprocesses : (S), state : Running > PS) > => < "subprocess-non-interrupting-boundary-events" : BPMNSystem | messages : (M), processes : (signalAll(< o0 : ProcessSnapshot | name : "interruptTrigger", tokens : (T), signals : (SIG), subprocesses : (S), state : Running > PS, "Subprocess (Activity_0zu4scn)")) > .

    --- Start configuration which would be generated
    op init : -> Configuration .
    eq init = < "subprocess-non-interrupting-boundary-events" : BPMNSystem | messages : (none), processes : (< "0" : ProcessSnapshot | name : "p1", tokens : ("start_Subprocess (Flow_0rt92qb)"), signals : (none), subprocesses : (none), state : Running >
    < "1" : ProcessSnapshot | name : "interruptTrigger", tokens : ("start_trigger_signalOrMessage (Flow_0eyi3rv)"), signals : (none), subprocesses : (none), state : Running >) > .
endm

mod BPMN-PREDS is
    pr BPMN-EXECUTION-subprocess-non-interrupting-boundary-events .
    pr SATISFACTION .
    subsort Configuration < State .

    var C : Configuration .
    var P : Prop .
    var X Y : Oid .
    var N : String . --- name
    var T : MSet . --- tokens
    var SIG : MSet . --- signals
    var M : MSet . --- messages
    var T1 : NeMSet .
    var S : Configuration .
    var State : ProcessState .


    op allTerminated : -> Prop .
    eq < X : BPMNSystem | messages : M, processes : (< Y : ProcessSnapshot | name : N, tokens : T, signals : SIG, subprocesses : S, state : Running > C) > |= allTerminated = false .
    eq < X : BPMNSystem | messages : M, processes : (C) > |= allTerminated = true [owise] .

    op unsafe : -> Prop .
    eq < X : BPMNSystem | messages : M, processes : (< Y : ProcessSnapshot | name : N, tokens : (T1 T1 T), signals : SIG, subprocesses : S, state : State > C) > |= unsafe = true .
    eq < X : BPMNSystem | messages : M, processes : (C) > |= unsafe = false [owise] .

    --- Generated atomic propositions
    --- no propositions
endm

mod BPMN-CHECK is
    pr BPMN-PREDS .
    pr MODEL-CHECKER .
    pr LTL-SIMPLIFIER .

    var X : Configuration .
endm

search init =>! X such that X |= allTerminated = true .
