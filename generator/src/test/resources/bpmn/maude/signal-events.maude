load model-checker.maude .

--- Multiset implementation could be extracted as well.
fmod MSET is pr
    STRING .
    sorts NeMSet MSet .
    subsort String < NeMSet < MSet .

    op none : -> MSet [ctor] .
    op __ : MSet MSet -> MSet [ctor assoc comm id: none] .
    op __ : NeMSet MSet -> NeMSet [ctor ditto] .
    op __ : MSet NeMSet -> NeMSet [ctor ditto] .
endfm

mod BPMN-EXECUTION is
    pr MSET .
    pr STRING .
    pr CONFIGURATION .

    sort ProcessState .
    subsort String < Oid .

    --- Processes
    ops Running, Terminated : -> ProcessState [ctor] .
    op tokens :_ : MSet -> Attribute [ctor] .
    op subprocesses :_ : Configuration -> Attribute [ctor] .
    op state :_ : ProcessState -> Attribute [ctor] .
    op ProcessSnapshot : -> Cid [ctor] .

    --- Message holder
    op MessageHolder : -> Cid [ctor] .
    op messages :_ : MSet -> Attribute [ctor] .

    op terminate : Configuration -> Configuration .

    vars P, P1 : String .
    vars T : MSet . --- tokens
    vars S : Configuration . --- subprocesses
    vars STATE : ProcessState . --- state
    var PS : Configuration .

    --- NOOP if none
    eq terminate(none) = none .
    --- NOOP if already terminated
    eq terminate(< P : ProcessSnapshot | tokens : T, subprocesses : S, state : Terminated >) = < P : ProcessSnapshot | tokens : T, subprocesses : S, state : Terminated > .
    --- Terminate all subprocesses recursively
    eq terminate(< P : ProcessSnapshot | tokens : T, subprocesses : S, state : STATE > PS) = < P : ProcessSnapshot | tokens : T, subprocesses : terminate(S), state : Terminated > terminate(PS) .

    rl [naturalTerminate] :
    < P : ProcessSnapshot | tokens : none, subprocesses : none, state : Running >
                            =>
    < P : ProcessSnapshot | tokens : none, subprocesses : none, state : Terminated > .
endm

mod BPMN-EXECUTION-signal-events is
    pr BPMN-EXECUTION .

    --- Generated variables
    vars T : MSet . --- tokens
    vars M : MSet . --- messages
    vars S : Configuration . --- subprocesses

    --- Generated rules
    rl [start_p1_StartEvent_1] :  < "p1" : ProcessSnapshot | tokens : ("start_p1 (StartEvent_1)" T), subprocesses : (S), state : Running > => < "p1" : ProcessSnapshot | tokens : ("start_p1_S1_Throw (Flow_09vy9fu)" T), subprocesses : (S), state : Running > .
    rl [S1_Throw_Event_17hujxw] :  < "p1" : ProcessSnapshot | tokens : ("start_p1_S1_Throw (Flow_09vy9fu)" T), subprocesses : (S), state : Running > => < "p1" : ProcessSnapshot | tokens : ("S1_Throw_S2_Catch (Flow_0leshl2)" T), subprocesses : (S), state : Running > < "p2" : ProcessSnapshot | tokens : ("S1_Catch_S2_Throw (Flow_0ra23g1)"), subprocesses : (none), state : Running > < "p3" : ProcessSnapshot | tokens : ("S1_Catch_EV_Gateway (Flow_0ei4onq)"), subprocesses : (none), state : Running > .
    rl [end_p1_Event_0mh8q9a] :  < "p1" : ProcessSnapshot | tokens : ("S2_Catch_end_p1 (Flow_07uqhhm)" T), subprocesses : (S), state : Running > => < "p1" : ProcessSnapshot | tokens : (T), subprocesses : (S), state : Running > .
    rl [S2_Throw_Event_16dtcup] :  < "p2" : ProcessSnapshot | tokens : ("S1_Catch_S2_Throw (Flow_0ra23g1)" T), subprocesses : (S), state : Running > < "p1" : ProcessSnapshot | tokens : ("S1_Throw_S2_Catch (Flow_0leshl2)" T), subprocesses : (S), state : Running > < "p3" : ProcessSnapshot | tokens : ("EV_Gateway (Gateway_1ion030)" T), subprocesses : (S), state : Running > => < "p2" : ProcessSnapshot | tokens : (T), subprocesses : (S), state : Running > < "p1" : ProcessSnapshot | tokens : ("S2_Catch_end_p1 (Flow_07uqhhm)" T), subprocesses : (S), state : Running > < "p3" : ProcessSnapshot | tokens : ("S2_Catch_end_p3 (Flow_0yzxakb)" T), subprocesses : (S), state : Running > .
    rl [EV_Gateway_Gateway_1ion030] :  < "p3" : ProcessSnapshot | tokens : ("S1_Catch_EV_Gateway (Flow_0ei4onq)" T), subprocesses : (S), state : Running > => < "p3" : ProcessSnapshot | tokens : ("EV_Gateway (Gateway_1ion030)" T), subprocesses : (S), state : Running > .
    rl [end_p3_Event_16f3ui0] :  < "p3" : ProcessSnapshot | tokens : ("S2_Catch_end_p3 (Flow_0yzxakb)" T), subprocesses : (S), state : Running > => < "p3" : ProcessSnapshot | tokens : (T), subprocesses : (S), state : Running > .

    --- Start configuration which would be generated
    op init : -> Configuration .
    eq init = < "messages" : MessageHolder | messages : (none) >
    < "p1" : ProcessSnapshot | tokens : ("start_p1 (StartEvent_1)"), subprocesses : (none), state : Running > .
endm

mod BPMN-PREDS is
    pr BPMN-EXECUTION-signal-events .
    pr SATISFACTION .
    subsort Configuration < State .

    var C : Configuration .
    var P : Prop .
    var X : Oid .
    var T : MSet .
    var T1 : NeMSet .
    var S : Configuration .
    var State : ProcessState .


    op allTerminated : -> Prop .
    eq < X : ProcessSnapshot | tokens : T, subprocesses : S, state : Running > C |= allTerminated = false .
    eq C |= allTerminated = true [owise] .

    op unsafe : -> Prop .
    eq < X : ProcessSnapshot | tokens : (T1 T1 T), subprocesses : S, state : State > C |= unsafe = true .
    eq C |= unsafe = false [owise] .

    --- Generated atomic propositions
    --- no propositions
endm

mod BPMN-CHECK is
    pr BPMN-PREDS .
    pr MODEL-CHECKER .
    pr LTL-SIMPLIFIER .
endm

red modelCheck(init,  <> [] allTerminated) .
