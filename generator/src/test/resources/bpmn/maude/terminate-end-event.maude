load model-checker.maude .

--- Multiset implementation could be extracted as well.
fmod MSET is pr
    STRING .
    sorts NeMSet MSet .
    subsort String < NeMSet < MSet .

    op none : -> MSet [ctor] .
    op __ : MSet MSet -> MSet [ctor assoc comm id: none] .
    op __ : NeMSet MSet -> NeMSet [ctor ditto] .
    op __ : MSet NeMSet -> NeMSet [ctor ditto] .

    op contains : MSet String -> Bool .

    vars X Y : String .
    var S S1 : MSet .

    eq contains(none, X) = false .
    eq contains(X S, X) = true .
    ceq contains(Y S, X) = contains(S, X) if X =/= Y .
endfm

mod BPMN-EXECUTION is
    pr MSET .
    pr STRING .
    pr CONFIGURATION .

    sort ProcessState .
    subsort String < Oid .

    --- BPMNSystem
    op BPMNSystem : -> Cid [ctor] .
    op messages :_ : MSet -> Attribute [ctor] .
    op processes :_ : Configuration -> Attribute [ctor] .

    --- Processes
    op ProcessSnapshot : -> Cid [ctor] .
    op tokens :_ : MSet -> Attribute [ctor] .
    op subprocesses :_ : Configuration -> Attribute [ctor] .
    ops Running, Terminated : -> ProcessState [ctor] .
    op state :_ : ProcessState -> Attribute [ctor] .

    op signalAll : Configuration MSet -> Configuration .
    op signal : MSet MSet -> MSet .
    op terminate : Configuration -> Configuration .

    vars P P1 : String .
    vars T T1 : MSet . --- tokens
    vars S : Configuration . --- subprocesses
    vars STATE : ProcessState . --- state
    var PS : Configuration .

    eq signalAll(none, T) = none .
    eq signalAll(< P : ProcessSnapshot | tokens : T, subprocesses : S, state : Running > PS, T1) = < P : ProcessSnapshot | tokens : signal(T, T1), subprocesses : S, state : Running > signalAll(PS, T1) .

    ceq signal(P T, T1) = P (P + "_signal") signal(T, T1) if contains(T1, P) .
    eq signal(P T, T1) = P signal(T, T1) [owise] .
    eq signal(none, T1) = none .

    eq terminate(none) = none .
    --- NOOP if already terminated
    eq terminate(< P : ProcessSnapshot | tokens : T, subprocesses : S, state : Terminated >) = < P : ProcessSnapshot | tokens : T, subprocesses : S, state : Terminated > .
    --- Terminate all subprocesses recursively
    eq terminate(< P : ProcessSnapshot | tokens : T, subprocesses : S, state : STATE > PS) = < P : ProcessSnapshot | tokens : T, subprocesses : terminate(S), state : Terminated > terminate(PS) .

    rl [naturalTerminate] :
    < P : ProcessSnapshot | tokens : none, subprocesses : none, state : Running >
                            =>
    < P : ProcessSnapshot | tokens : none, subprocesses : none, state : Terminated > .
endm

mod BPMN-EXECUTION-terminate-end-event is
    pr BPMN-EXECUTION .

    --- Generated variables
    vars T : MSet . --- tokens
    vars M : MSet . --- messages
    vars S : Configuration . --- subprocesses
    vars P : Configuration . --- processes

    --- Generated rules
    rl [start_StartEvent_1] :  < "terminate-end-event" : BPMNSystem | messages : (M), processes : (< "terminate-end-event" : ProcessSnapshot | tokens : ("start (StartEvent_1)" T), subprocesses : (S), state : Running > P) > => < "terminate-end-event" : BPMNSystem | messages : (M), processes : (< "terminate-end-event" : ProcessSnapshot | tokens : ("start_p1 (Flow_0smgvfd)" T), subprocesses : (S), state : Running > P) > .
    rl [p1_Gateway_03pfysn] :  < "terminate-end-event" : BPMNSystem | messages : (M), processes : (< "terminate-end-event" : ProcessSnapshot | tokens : ("start_p1 (Flow_0smgvfd)" T), subprocesses : (S), state : Running > P) > => < "terminate-end-event" : BPMNSystem | messages : (M), processes : (< "terminate-end-event" : ProcessSnapshot | tokens : ("p1_A (Flow_01ts0by)" "p1_B (Flow_0p8b824)" T), subprocesses : (S), state : Running > P) > .
    rl [A_Activity_19fz4g9_start] :  < "terminate-end-event" : BPMNSystem | messages : (M), processes : (< "terminate-end-event" : ProcessSnapshot | tokens : ("p1_A (Flow_01ts0by)" T), subprocesses : (S), state : Running > P) > => < "terminate-end-event" : BPMNSystem | messages : (M), processes : (< "terminate-end-event" : ProcessSnapshot | tokens : ("A (Activity_19fz4g9)" T), subprocesses : (S), state : Running > P) > .
    rl [A_Activity_19fz4g9_end] :  < "terminate-end-event" : BPMNSystem | messages : (M), processes : (< "terminate-end-event" : ProcessSnapshot | tokens : ("A (Activity_19fz4g9)" T), subprocesses : (S), state : Running > P) > => < "terminate-end-event" : BPMNSystem | messages : (M), processes : (< "terminate-end-event" : ProcessSnapshot | tokens : ("A_end (Flow_0zgj5gw)" T), subprocesses : (S), state : Running > P) > .
    rl [B_Activity_1ol0d86_start] :  < "terminate-end-event" : BPMNSystem | messages : (M), processes : (< "terminate-end-event" : ProcessSnapshot | tokens : ("p1_B (Flow_0p8b824)" T), subprocesses : (S), state : Running > P) > => < "terminate-end-event" : BPMNSystem | messages : (M), processes : (< "terminate-end-event" : ProcessSnapshot | tokens : ("B (Activity_1ol0d86)" T), subprocesses : (S), state : Running > P) > .
    rl [B_Activity_1ol0d86_end] :  < "terminate-end-event" : BPMNSystem | messages : (M), processes : (< "terminate-end-event" : ProcessSnapshot | tokens : ("B (Activity_1ol0d86)" T), subprocesses : (S), state : Running > P) > => < "terminate-end-event" : BPMNSystem | messages : (M), processes : (< "terminate-end-event" : ProcessSnapshot | tokens : ("B_terminate_end (Flow_178sut1)" T), subprocesses : (S), state : Running > P) > .
    rl [terminate_end_Event_0i6p82s] :  < "terminate-end-event" : BPMNSystem | messages : (M), processes : (< "terminate-end-event" : ProcessSnapshot | tokens : ("B_terminate_end (Flow_178sut1)" T), subprocesses : (S), state : Running > P) > => < "terminate-end-event" : BPMNSystem | messages : (M), processes : (< "terminate-end-event" : ProcessSnapshot | tokens : (T), subprocesses : (terminate(S)), state : Terminated > P) > .
    rl [end_Event_1bkqcvd] :  < "terminate-end-event" : BPMNSystem | messages : (M), processes : (< "terminate-end-event" : ProcessSnapshot | tokens : ("A_end (Flow_0zgj5gw)" T), subprocesses : (S), state : Running > P) > => < "terminate-end-event" : BPMNSystem | messages : (M), processes : (< "terminate-end-event" : ProcessSnapshot | tokens : (T), subprocesses : (S), state : Running > P) > .

    --- Start configuration which would be generated
    op init : -> Configuration .
    eq init = < "terminate-end-event" : BPMNSystem | messages : (none), processes : (< "terminate-end-event" : ProcessSnapshot | tokens : ("start (StartEvent_1)"), subprocesses : (none), state : Running >) > .
endm

mod BPMN-PREDS is
    pr BPMN-EXECUTION-terminate-end-event .
    pr SATISFACTION .
    subsort Configuration < State .

    var C : Configuration .
    var P : Prop .
    var X Y : Oid .
    var T : MSet .
    var M : MSet . --- messages
    var T1 : NeMSet .
    var S : Configuration .
    var State : ProcessState .


    op allTerminated : -> Prop .
    eq < X : BPMNSystem | messages : M, processes : (< Y : ProcessSnapshot | tokens : T, subprocesses : S, state : Running > C) > |= allTerminated = false .
    eq < X : BPMNSystem | messages : M, processes : (C) > |= allTerminated = true [owise] .

    op unsafe : -> Prop .
    eq < X : BPMNSystem | messages : M, processes : (< Y : ProcessSnapshot | tokens : (T1 T1 T), subprocesses : S, state : State > C) > |= unsafe = true .
    eq < X : BPMNSystem | messages : M, processes : (C) > |= unsafe = false [owise] .

    --- Generated atomic propositions
    --- no propositions
endm

mod BPMN-CHECK is
    pr BPMN-PREDS .
    pr MODEL-CHECKER .
    pr LTL-SIMPLIFIER .

    var X : Configuration .
endm

red modelCheck(init,  <> [] allTerminated) .
