load model-checker.maude .

--- Multiset implementation could be extracted as well.
fmod MSET is pr
    STRING .
    sorts NeMSet MSet .
    subsort String < NeMSet < MSet .

    op none : -> MSet [ctor] .
    op __ : MSet MSet -> MSet [ctor assoc comm id: none] .
    op __ : NeMSet MSet -> NeMSet [ctor ditto] .
    op __ : MSet NeMSet -> NeMSet [ctor ditto] .

    op contains : MSet String -> Bool .

    vars X Y : String .
    var S S1 : MSet .

    eq contains(none, X) = false .
    eq contains(X S, X) = true .
    ceq contains(Y S, X) = contains(S, X) if X =/= Y .
endfm

mod BPMN-EXECUTION is
    pr MSET .
    pr STRING .
    pr CONFIGURATION .

    sort ProcessState .
    subsort String < Oid .

    --- BPMNSystem
    op BPMNSystem : -> Cid [ctor] .
    op messages :_ : MSet -> Attribute [ctor] .
    op processes :_ : Configuration -> Attribute [ctor] .

    --- Processes
    op ProcessSnapshot : -> Cid [ctor] .
    op tokens :_ : MSet -> Attribute [ctor] .
    op subprocesses :_ : Configuration -> Attribute [ctor] .
    ops Running, Terminated : -> ProcessState [ctor] .
    op state :_ : ProcessState -> Attribute [ctor] .

    op signalAll : Configuration MSet -> Configuration .
    op signal : MSet MSet -> MSet .
    op terminate : Configuration -> Configuration .

    vars P P1 : String .
    vars T T1 : MSet . --- tokens
    vars S : Configuration . --- subprocesses
    vars STATE : ProcessState . --- state
    var PS : Configuration .

    eq signalAll(none, T) = none .
    eq signalAll(< P : ProcessSnapshot | tokens : T, subprocesses : S, state : Running > PS, T1) = < P : ProcessSnapshot | tokens : signal(T, T1), subprocesses : S, state : Running > signalAll(PS, T1) .

    ceq signal(P T, T1) = P (P + "_signal") signal(T, T1) if contains(T1, P) .
    eq signal(P T, T1) = P signal(T, T1) [owise] .
    eq signal(none, T1) = none .

    eq terminate(none) = none .
    --- NOOP if already terminated
    eq terminate(< P : ProcessSnapshot | tokens : T, subprocesses : S, state : Terminated >) = < P : ProcessSnapshot | tokens : T, subprocesses : S, state : Terminated > .
    --- Terminate all subprocesses recursively
    eq terminate(< P : ProcessSnapshot | tokens : T, subprocesses : S, state : STATE > PS) = < P : ProcessSnapshot | tokens : T, subprocesses : terminate(S), state : Terminated > terminate(PS) .

    rl [naturalTerminate] :
    < P : ProcessSnapshot | tokens : none, subprocesses : none, state : Running >
                            =>
    < P : ProcessSnapshot | tokens : none, subprocesses : none, state : Terminated > .
endm

mod BPMN-EXECUTION-message-events is
    pr BPMN-EXECUTION .

    --- Generated variables
    vars T : MSet . --- tokens
    vars M : MSet . --- messages
    vars S : Configuration . --- subprocesses
    vars P : Configuration . --- processes

    --- Generated rules
    rl [start_p1_Event_0p0uvwz] :  < "message-events" : BPMNSystem | messages : (M), processes : (< "p1" : ProcessSnapshot | tokens : ("start_p1 (Event_0p0uvwz)" T), subprocesses : (S), state : Running > P) > => < "message-events" : BPMNSystem | messages : (M), processes : (< "p1" : ProcessSnapshot | tokens : ("start_p1_catch_p1 (Flow_12mxyv6)" T), subprocesses : (S), state : Running > P) > .
    rl [catch_p1_Event_0mrifvx_start] :  < "message-events" : BPMNSystem | messages : (M), processes : (< "p1" : ProcessSnapshot | tokens : ("start_p1_catch_p1 (Flow_12mxyv6)" T), subprocesses : (S), state : Running > P) > => < "message-events" : BPMNSystem | messages : (M), processes : (< "p1" : ProcessSnapshot | tokens : ("catch_p1 (Event_0mrifvx)" T), subprocesses : (S), state : Running > P) > .
    rl [catch_p1_Event_0mrifvx] :  < "message-events" : BPMNSystem | messages : ("throw_p2_catch_p1" M), processes : (< "p1" : ProcessSnapshot | tokens : ("catch_p1 (Event_0mrifvx)" T), subprocesses : (S), state : Running > P) > => < "message-events" : BPMNSystem | messages : (M), processes : (< "p1" : ProcessSnapshot | tokens : ("catch_p1_end_p1 (Flow_0ed0ztm)" T), subprocesses : (S), state : Running > P) > .
    rl [end_p1_Event_0gkal63] :  < "message-events" : BPMNSystem | messages : (M), processes : (< "p1" : ProcessSnapshot | tokens : ("catch_p1_end_p1 (Flow_0ed0ztm)" T), subprocesses : (S), state : Running > P) > => < "message-events" : BPMNSystem | messages : ("end_p1_catch_p2" M), processes : (< "p1" : ProcessSnapshot | tokens : (T), subprocesses : (S), state : Running > P) > .
    rl [start_p2_Event_1mnruxy] :  < "message-events" : BPMNSystem | messages : (M), processes : (< "p2" : ProcessSnapshot | tokens : ("start_p2 (Event_1mnruxy)" T), subprocesses : (S), state : Running > P) > => < "message-events" : BPMNSystem | messages : (M), processes : (< "p2" : ProcessSnapshot | tokens : ("start_p2_throw_p2 (Flow_1sb90yn)" T), subprocesses : (S), state : Running > P) > .
    rl [throw_p2_Event_1c7b7i9] :  < "message-events" : BPMNSystem | messages : (M), processes : (< "p2" : ProcessSnapshot | tokens : ("start_p2_throw_p2 (Flow_1sb90yn)" T), subprocesses : (S), state : Running > P) > => < "message-events" : BPMNSystem | messages : ("throw_p2_catch_p1" M), processes : (< "p2" : ProcessSnapshot | tokens : ("throw_p2_catch_p2 (Flow_1tf29d7)" T), subprocesses : (S), state : Running > P) > .
    rl [catch_p2_Event_0m12iqx_start] :  < "message-events" : BPMNSystem | messages : (M), processes : (< "p2" : ProcessSnapshot | tokens : ("throw_p2_catch_p2 (Flow_1tf29d7)" T), subprocesses : (S), state : Running > P) > => < "message-events" : BPMNSystem | messages : (M), processes : (< "p2" : ProcessSnapshot | tokens : ("catch_p2 (Event_0m12iqx)" T), subprocesses : (S), state : Running > P) > .
    rl [catch_p2_Event_0m12iqx] :  < "message-events" : BPMNSystem | messages : ("end_p1_catch_p2" M), processes : (< "p2" : ProcessSnapshot | tokens : ("catch_p2 (Event_0m12iqx)" T), subprocesses : (S), state : Running > P) > => < "message-events" : BPMNSystem | messages : (M), processes : (< "p2" : ProcessSnapshot | tokens : ("catch_p2_end_p2 (Flow_021nwlu)" T), subprocesses : (S), state : Running > P) > .
    rl [end_p2_Event_03mvx21] :  < "message-events" : BPMNSystem | messages : (M), processes : (< "p2" : ProcessSnapshot | tokens : ("catch_p2_end_p2 (Flow_021nwlu)" T), subprocesses : (S), state : Running > P) > => < "message-events" : BPMNSystem | messages : ("end_p2_start_p3" M), processes : (< "p2" : ProcessSnapshot | tokens : (T), subprocesses : (S), state : Running > < "p3" : ProcessSnapshot | tokens : ("start_p3 (Event_0lognl6)" T), subprocesses : (none), state : Running > P) > .
    rl [start_p3_Event_0lognl6] :  < "message-events" : BPMNSystem | messages : ("end_p2_start_p3" M), processes : (< "p3" : ProcessSnapshot | tokens : ("start_p3 (Event_0lognl6)" T), subprocesses : (S), state : Running > P) > => < "message-events" : BPMNSystem | messages : (M), processes : (< "p3" : ProcessSnapshot | tokens : ("start_p3_end_p3 (Flow_18621tw)" T), subprocesses : (S), state : Running > P) > .
    rl [end_p3_Event_1mjwxft] :  < "message-events" : BPMNSystem | messages : (M), processes : (< "p3" : ProcessSnapshot | tokens : ("start_p3_end_p3 (Flow_18621tw)" T), subprocesses : (S), state : Running > P) > => < "message-events" : BPMNSystem | messages : (M), processes : (< "p3" : ProcessSnapshot | tokens : (T), subprocesses : (S), state : Running > P) > .

    --- Start configuration which would be generated
    op init : -> Configuration .
    eq init = < "message-events" : BPMNSystem | messages : (none), processes : (< "p1" : ProcessSnapshot | tokens : ("start_p1 (Event_0p0uvwz)"), subprocesses : (none), state : Running >
    < "p2" : ProcessSnapshot | tokens : ("start_p2 (Event_1mnruxy)"), subprocesses : (none), state : Running >) > .
endm

mod BPMN-PREDS is
    pr BPMN-EXECUTION-message-events .
    pr SATISFACTION .
    subsort Configuration < State .

    var C : Configuration .
    var P : Prop .
    var X Y : Oid .
    var T : MSet .
    var M : MSet . --- messages
    var T1 : NeMSet .
    var S : Configuration .
    var State : ProcessState .


    op allTerminated : -> Prop .
    eq < X : BPMNSystem | messages : M, processes : (< Y : ProcessSnapshot | tokens : T, subprocesses : S, state : Running > C) > |= allTerminated = false .
    eq < X : BPMNSystem | messages : M, processes : (C) > |= allTerminated = true [owise] .

    op unsafe : -> Prop .
    eq < X : BPMNSystem | messages : M, processes : (< Y : ProcessSnapshot | tokens : (T1 T1 T), subprocesses : S, state : State > C) > |= unsafe = true .
    eq < X : BPMNSystem | messages : M, processes : (C) > |= unsafe = false [owise] .

    --- Generated atomic propositions
    --- no propositions
endm

mod BPMN-CHECK is
    pr BPMN-PREDS .
    pr MODEL-CHECKER .
    pr LTL-SIMPLIFIER .

    var X : Configuration .
endm

red modelCheck(init,  <> [] allTerminated) .
